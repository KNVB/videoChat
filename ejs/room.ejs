<html>
	<head>
		<!-- Required meta tags -->
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

		<!-- Bootstrap CSS -->
		<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css" integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk" crossorigin="anonymous">
		<!-- Optional JavaScript -->
		<!-- jQuery first, then Popper.js, then Bootstrap JS -->
		<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
		<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
		<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js" integrity="sha384-OgVRvuATP1z7JjHLkuOU7Xw704+h835Lr+6QL9UvYjZE3Ipu6Tp75j7Bh/kR0JKI" crossorigin="anonymous"></script>
		<script src="/socket.io/socket.io.js"></script>
		<script src="js/ChannelInfo.js"></script>
		<script src="js/LocalMedia.js"></script>
		<script src="js/MediaChannel.js"></script>
		<script>
			var channelList={};
			var messageBox;
			var socket = io.connect();
			
			$( document ).ready(function(){
				socket.emit("joinRoom",{roomId:"<%=roomId%>",userEmail:"<%=user.email%>"});
				document.getElementById("link").textContent=getShareLink();
				messageBox=document.getElementById("messageHistory");
			});
			async function add(){
				var selfView=document.getElementById("selfView");
				if (selfView.srcObject!=null) {
					selfView.srcObject.getTracks().forEach((track)=>{
						track.stop();
					});
					selfView.srcObject=null;
				}
				var localMedia=new LocalMedia();
				
				
				var stream=await localMedia.getStream("screen","no");
				Object.keys(channelList).forEach((key)=>{
					var mc=channelList[key];
					mc.removeAllMediaTrack();
					stream.getTracks().forEach((track)=>{
						mc.addTrack(track,stream);
					});
				});
			}
			function clearVideo(){
				
				if (selfView.srcObject!=null) {
					selfView.srcObject.getTracks().forEach((track)=>{
						track.stop();
					});
					selfView.srcObject=null;
				}
			}
			function getShareLink(){
				var url = window.location.href;
				var arr = url.split("/");
				var result = arr[0] + "//" + arr[2]+"/joinRoom/<%=roomId%>";
				return result;
			}
			function initMediaChannel(ci) {
				var mediaChannel=new MediaChannel(ci);
				mediaChannel.setLogger(writeLog);
				mediaChannel.setSocket(socket);
				mediaChannel.setOnMessageEventHandler(onMessageEventHandler);
				mediaChannel.setOnTrackEventHandler(ontrackEventHandler);
				mediaChannel.createConnection();
				return mediaChannel;
			}
			function leaveTheRoom(){
				var req={roomId:"<%=roomId%>","userEmail":"<%=user.email%>"};
				Object.keys(channelList).forEach((key)=>{
					var mc=channelList[key];
					mc.hangUp();
				});
				socket.emit("leaveRoom",req);
			}
			function onMessageEventHandler(messageObj,channelInfo){
				writeLog("An on message event occur in "+channelInfo.receiver.email+" channel");
				writeLog(messageObj);
			}
			function ontrackEventHandler(track,channelInfo){
				writeLog("An ontrack event occur in "+channelInfo.receiver.email+" channel");
			}
			function sendMessage(){
				var html="<div class=\"alert alert-success\" role=\"alert\">";
				html+="<%=user.alias%>";
				html+="<div class=\"d-flex justify-content-center\">"+document.getElementById("message").value+"</div>";
				html+="</div>";
				$(messageBox).append(html);
				var req={"roomId":"<%=roomId%>"};
				req["msg"]=document.getElementById("message").value;
				req["userAlias"]="<%=user.alias%>";
				socket.emit("broadcastMessage",req);
				/*
				Object.keys(channelList).forEach((key)=>{
					var mc=channelList[key];
					mc.sendMsg(document.getElementById("message").value);
				});		
				*/
				document.getElementById("message").value="";
			}
			
			function writeLog(message){
				console.log(message);
			}
//-------------------------------------------------------------------------------------------------------			
			socket.on("broadcastMessage",(res)=>{
				var html="<div class=\"alert alert-success\" role=\"alert\">";
				html+=res.userAlias;
				html+="<div class=\"d-flex justify-content-center\">"+res.msg+"</div>";
				html+="</div>";
				$(messageBox).append(html);
			});
			socket.on("receiveICECandidate",async(req)=>{
				var ci=req.channelInfo;
				var mc=channelList[ci.sender.email];
				console.log("Receive an ICE Candidat from:"+ci.sender.email);
				mc.addICECandidate(req["iceCandidate"]);
			});
			socket.on('requestMediaOffer',async (req)=>{
				var ci=new ChannelInfo();
				var mediaChannel,offer;
				var res={};
				ci.roomId="<%=roomId%>";
				ci.receiver=req.sender;
				ci.sender=req.receiver;
				mediaChannel=initMediaChannel(ci);
				offer=await mediaChannel.createOffer();
				channelList[req.sender.email]=mediaChannel;
				res["channelInfo"]=ci;
				res["offer"]=offer;
				
				socket.emit("sendMediaOffer",res);
			});
			socket.on('receiveMediaAnswer',async (req)=>{
				var ci=req.channelInfo;
				var mc=channelList[ci.sender.email];
				await mc.setRemoteDescription(req.answer);
			});
			socket.on("receiveMediaOffer",async(req)=>{
				var ci=req.channelInfo;
				var answer=await channelList[ci.sender.email].createAnswer(req.offer);
				var res={};
				
				res["answer"]=answer;
				res["channelInfo"]=channelList[ci.sender.email].getChannelInfo();
				socket.emit("sendMediaAnswer",res);
			});
			socket.on("userJoin",(res)=>{
				var ci, mediaChannel;
				var html="<div class=\"alert alert-success\" role=\"alert\">";
					html+="User "+res.newUser.alias+" has joined the meeting";
					html+="</div>";
				
				var req={};
				$(messageBox).append(html);
				ci=new ChannelInfo()
				ci.roomId="<%=roomId%>";
				ci.receiver=res.newUser;
				ci.sender=<%- JSON.stringify(user)%>;
				mediaChannel=initMediaChannel(ci);
				channelList[res.newUser.email]=mediaChannel;
				console.log("user count="+res.userCount);
				socket.emit("requestMediaOffer",ci);
				
			});
			socket.on("userLeave",(res)=>{
				var html="<div class=\"alert alert-danger\" role=\"alert\">";
					html+="User "+res.user.alias+" has left the meeting";
					html+="</div>";
				$(messageBox).append(html);
				console.log("user count="+res.userCount);
			});		
		</script>
	</head>
	<body>
		
		<div id="messageHistory" class="h-25 w-100 border border-primar overflow-auto">
		</div>
		<input type="text" id=message> <button onclick="sendMessage()">Send message</button><br>
		<button onclick="add()">Add</button>
		<form action="/leaveRoom/<%=roomId%>" method="post" onsubmit="leaveTheRoom()">
			<input type=hidden name=userEmail value="<%=user.email%>">
			<button>Leave the Room</button>
		</form>
		<div id="link">
		</div>
		<video id="selfView"></video><video id="remoteView"></video>
	</body>
</html>	